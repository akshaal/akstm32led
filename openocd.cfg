# Crash course to (jim-)TCL
#   1: Everything is a string
#   2: Control flow does not exist. Cclassic FOR loop/IF statement hey are commands
#   3: [square-brackets] are command substitutions. Like Unix Shell ‘back-ticks‘. The result of a [square-bracket] is exactly 1 string.
#   4: “double-quoted-things” are just simply quoted text. $V and [..] are expanded in place - the result is exactly 1 string
#   5: {Curly-Braces}: $VARIABLES and [square-brackets] are parsed, but are NOT expanded. They can nest.
#   6: ; can be used to separate commands
#   7: eval can be used to run string argument like: eval {set a 1; set b 2}
#   8: 'set' used to assign variables
#   9: Expressions
#        $a + 3.1                6.1
#        2 + "$a.$b"             5.6
#        4*[llength "6 2"]       8
#        {word one} < "word $a"  0
#        int() double() round() abs(), rand(), srand(), ceil(), floor()
#        eq ne - String equal and not equal
#        != == - Compare as numbers
#        && || - Logical
#        x ? y : z
#  10: proc name arglist ?statics? body
#  11: arguments can be: 'name' (simple arg), '{name default}' (optional), '&name' (reference), 'args' (remaining arguments)
#  12: in proc: Global variables can be accessed by invoking the global command or via the :: prefix.
#  13: set x(first) 44  -- assign to array value
#  Commands: http://jim.tcl.tk/fossil/doc/trunk/Tcl_shipped.html#CommandIndex

source [find interface/stlink-v2.cfg]

transport select hla_swd
source [find target/stm32f1x.cfg]

# We use FreeRTOS
$_TARGETNAME configure -rtos FreeRTOS

flash banks

proc make {} {exec make}

proc clean {} {exec make clean}

proc write {} {program tmp/akstm32le-opt.bin 0x08000000 reset}
